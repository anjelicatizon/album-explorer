{"version":3,"sources":["components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","href","App","handleChange","event","setState","userInput","target","value","handleClick","preventDefault","axios","method","url","dataResponse","params","term","state","country","media","entity","then","res","albumsReturned","data","results","console","log","albums","handleSort","album","sort","action","htmlFor","type","id","onChange","this","onClick","icon","faSort","map","artistName","albumArt","artworkUrl100","albumName","collectionName","explicitAlert","collectionExplicitness","releaseDate","collectionId","key","src","alt","slice","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iTAceA,EAVA,WACX,OACI,gCACI,yBAAKC,UAAU,WACX,iDCMDC,EAVA,WACX,OACI,gCACI,yBAAKD,UAAU,WACX,yCAAc,uBAAGE,KAAK,4BAAR,oB,gBC8IfC,G,wDAzIb,aAAe,IAAD,8BACZ,gBAkCFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAWF,EAAMG,OAAOC,SArCd,EA0CdC,YAAc,SAACL,GACbA,EAAMM,iBAENC,IAAM,CACJC,OAAQ,MACRC,IAAK,kCACLC,aAAc,OACdC,OAAQ,CAENC,KAAM,EAAKC,MAAMX,UACjBY,QAAS,KACTC,MAAO,QACPC,OAAQ,WAETC,MAAK,SAACC,GAEL,IAAMC,EAAiBD,EAAIE,KAAKC,QAChCC,QAAQC,IAAIJ,GAEZ,EAAKlB,SAAS,CACZuB,OAAQL,OAKd,EAAKlB,SAAS,CACZC,UAAW,MApED,EAyEduB,WAAa,SAACC,GACZJ,QAAQC,IAAIG,GACU,YAAKA,GAAOC,QAzElC,EAAKd,MAAQ,CACXW,OAAQ,GACRtB,UAAW,IAJD,E,qDA+EZ,OACE,yBAAKP,UAAU,OAEb,kBAAC,EAAD,MAGA,iCACE,yBAAKA,UAAU,WACb,0BAAMiC,OAAO,UACX,2BAAOC,QAAQ,cAAf,0DACA,2BAAOC,KAAK,OAAOC,GAAG,WAAWpC,UAAU,aAAaqC,SAAUC,KAAKlC,aAAcK,MAAO6B,KAAKpB,MAAMX,YACvG,2BAAO4B,KAAK,SAASnC,UAAU,SAASS,MAAM,KAAK8B,QAASD,KAAK5B,eAInE,4BAAQV,UAAU,OAAOuC,QAASD,KAAKR,YAAvC,QAAwD,kBAAC,IAAD,CAAiBU,KAAMC,SAOlFH,KAAKpB,MAAMW,OAAOa,KAAI,SAACX,GACtBJ,QAAQC,IAAIG,GAGOA,EAAMY,WAAzB,IACMC,EAAWb,EAAMc,cACjBC,EAAYf,EAAMgB,eAClBC,EAAgBjB,EAAMkB,uBACtBC,EAAcnB,EAAMmB,YACpBd,EAAKL,EAAMoB,aAEjB,OACI,6BAASnD,UAAU,WAGjB,wBAAIoD,IAAKhB,GAEP,4BACE,yBAAKiB,IAAKT,EAAUU,IAAI,kBACxB,4BAAKR,GACL,2BAAIE,GACJ,wCAAcE,EAAYK,MAAM,EAAE,WA1ChD,IAmDE,kBAAC,EAAD,W,GAtIUC,IAAMC,YCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.2f8f38a0.chunk.js","sourcesContent":["import React from \"react\";\n\n// Function component because all it will do is display info on the page\n\nconst Header = () => {\n    return(\n        <header>\n            <div className=\"wrapper\">\n                <h1>Album Explorer</h1>\n            </div>\n        </header>\n    );\n};\n\nexport default Header;","import React from \"react\";\n\n// Function component because all it will do is display info on the page\n\nconst Footer = () => {\n    return(\n        <footer>\n            <div className=\"wrapper\">\n                <p>Created at <a href=\"https://junocollege.com/\">Juno College</a></p>\n            </div>\n        </footer>\n    );\n};\n\nexport default Footer;","import React, { Fragment } from \"react\";\nimport axios from \"axios\";\nimport Header from \"./components/Header.js\"\nimport Footer from \"./components/Footer.js\"\n// Font Awesome - CAN MAKE A COMPONENT LATER\nimport ReactDOM from 'react-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSort } from '@fortawesome/free-solid-svg-icons'\nimport \"./App.css\";\n\nclass App extends React.Component {\n\n  // Constructor - set initial state\n  constructor() {\n    super();\n    this.state = {\n      albums: [],\n      userInput: ''\n    };\n  };\n\n  // // USING COMPONENT DID MOUNT TO TEST API CALL BUT IT DOES NOT GO IN DID MOUNT FOR THE FINAL VERSION CUZ THERE WILL BE NO ALBUMS APPEARING ON LOAD\n  // componentDidMount(){\n  //   // API Call\n  //   // axios({\n  //   //   method: \"GET\",\n  //   //   url: \"https://itunes.apple.com/search\",\n  //   //   dataResponse: \"JSON\",\n  //   //   params: {\n  //   //     term: 'Fall Out Boy',\n  //   //     // term: this.state.userInput,\n  //   //     country: \"CA\",\n  //   //     media: \"music\",\n  //   //     entity: \"album\"\n  //   //   }\n  //   // }).then((res) => {\n  //   //     // albums is the array of the results returned from API\n  //   //     const albumsReturned = res.data.results\n  //   //     console.log(albumsReturned)\n\n  //   //     this.setState({\n  //   //       albums: albumsReturned\n  //   //     });\n  //   //   });\n  // }\n  \n  // EVENT LISTENERS\n  // Tracks User's input in text box\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value\n    });\n  };\n\n  // Action when user clicks submit on form\n  handleClick = (event) => {\n    event.preventDefault();\n\n    axios({\n      method: \"GET\",\n      url: \"https://itunes.apple.com/search\",\n      dataResponse: \"JSON\",\n      params: {\n        // term: 'Fall Out Boy',\n        term: this.state.userInput,\n        country: \"CA\",\n        media: \"music\",\n        entity: \"album\"\n      }\n    }).then((res) => {\n        // albums is the array of the results returned from API\n        const albumsReturned = res.data.results\n        console.log(albumsReturned)\n\n        this.setState({\n          albums: albumsReturned\n        });\n      });\n\n    // reset input field\n    this.setState({\n      userInput: ''\n    })\n  }\n\n  //Tracks Sort button\n  handleSort = (album) => {\n    console.log(album)\n    const sortedResults = [... album].sort()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* HEADER */}\n        <Header />\n\n        {/* FORM */}\n        <section>\n          <div className=\"wrapper\">\n            <form action=\"submit\">\n              <label htmlFor=\"search-bar\">Type in an artist to discover their entire discography</label>\n              <input type=\"text\" id=\"newAlbum\" className=\"search-bar\" onChange={this.handleChange} value={this.state.userInput}/>\n              <input type=\"submit\" className=\"submit\" value=\"Go\" onClick={this.handleClick}/>\n            </form>\n\n            {/* Sort Button */}\n            <button className=\"sort\" onClick={this.handleSort}>Sort <FontAwesomeIcon icon={faSort} /></button>\n          </div>\n        </section>\n\n        {/* RESULTS/ALBUM SECTION */}\n        {/* Telling render method that once you get info on the albums, map through them and display them in an li*/}\n        {/* REFACTOR THIS LATER WITH PROPS & A COMPONENT */}\n        {this.state.albums.map((album) => {\n          console.log(album)\n\n          // Variables for specific pieces of info from the API\n          const artistName = album.artistName\n          const albumArt = album.artworkUrl100\n          const albumName = album.collectionName\n          const explicitAlert = album.collectionExplicitness\n          const releaseDate = album.releaseDate\n          const id = album.collectionId\n\n          return (\n              <section className=\"wrapper\">\n                \n                {/* Album results */}\n                <ul key={id}>\n                  \n                  <li>\n                    <img src={albumArt} alt=\"Album artwork\"/>\n                    <h3>{albumName}</h3>\n                    <p>{explicitAlert}</p>\n                    <p>Released: {releaseDate.slice(0,10)}</p>\n                  </li>\n                </ul>\n\n              </section>\n          )\n        })};\n        \n        {/* FOOTER */}\n        <Footer />\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}