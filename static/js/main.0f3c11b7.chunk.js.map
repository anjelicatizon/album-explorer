{"version":3,"sources":["components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","icon","faRecordVinyl","href","faGithub","faLinkedin","faTwitter","Footer","App","handleChange","event","setState","userInput","target","value","handleClick","preventDefault","axios","url","responseType","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","term","state","country","media","entity","xmlToJSON","then","res","albumsReturned","data","results","map","coverArt","newString","artworkUrl100","replace","newSfwString","collectionExplicitness","length","albums","alert","console","log","handleSortDesc","sortedDescList","sort","a","b","Date","parse","releaseDate","handleSortAsc","sortedAscList","action","htmlFor","type","id","onChange","this","placeholder","onClick","faSortDown","faSortUp","album","artistName","albumArt","albumName","collectionName","explicitAlert","collectionId","collectionViewUrl","key","handleModal","src","alt","slice","faApple","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f3c11b7.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faRecordVinyl } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub, faLinkedin, faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n\n// Function component because all it will do is display info on the page\n\nconst Header = () => {\n    return(\n        <header>\n            <div className=\"wrapper\">\n                <div className=\"headerContainer\">\n                    <h1><FontAwesomeIcon icon={faRecordVinyl} /> Album Explorer</h1>\n\n                    <div className=\"socialIcons\">\n                        <a href=\"https://github.com/anjelicatizon/album-explorer\"><FontAwesomeIcon icon={faGithub} /></a>\n                        <a href=\"https://www.linkedin.com/in/anjelicatizon/\"><FontAwesomeIcon icon={faLinkedin} /></a>\n                        <a href=\"https://twitter.com/anjelicatizon\"><FontAwesomeIcon icon={faTwitter} /></a>\n                    </div>\n                </div>\n            </div>\n        </header>\n    );\n};\n\nexport default Header;","import React from \"react\";\n\n// Function component because all it will do is display info on the page\n\nconst Footer = () => {\n    return(\n        <footer>\n            <div className=\"wrapper\">\n                <p>Created at <a href=\"https://junocollege.com/\">Juno College</a></p>\n            </div>\n        </footer>\n    );\n};\n\nexport default Footer;","import React from \"react\";\nimport axios from \"axios\";\nimport Header from \"./components/Header.js\"\nimport Footer from \"./components/Footer.js\"\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons'\nimport { faApple } from \"@fortawesome/free-brands-svg-icons\";\nimport Qs from 'qs'\nimport \"./App.css\";\n\nclass App extends React.Component {\n\n  // Constructor - set initial state\n  constructor() {\n    super();\n    this.state = {\n      albums: [],\n      userInput: ''\n    };\n  };\n  \n  // EVENT LISTENERS\n  // Tracks User's input in text box\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value\n    });\n  };\n\n  // Action when user clicks submit on form\n  handleClick = (event) => {\n    event.preventDefault();\n\n    // Axios call using Juno proxy server\n    axios({\n      url: 'https://proxy.hackeryou.com',\n      responseType:'json',\n      paramsSerializer: function(params) {\n        return Qs.stringify(params, {arrayFormat: 'brackets'})\n      },\n      params: {\n        reqUrl: 'https://itunes.apple.com/search',\n        params: {\n          term: this.state.userInput,\n          country: \"CA\",\n          media: \"music\",\n          entity: \"album\"\n        }, \n        xmlToJSON: false\n      }\n      }).then((res) => {\n        const albumsReturned = res.data.results\n\n        // Images returned from the API are only 100x100 - the img URL ends with .../100x100.jpg\n        // Change the URL to be .../500x500.jpg so photos are larger\n        albumsReturned.map( (coverArt) => {\n          const oldString = coverArt.artworkUrl100;\n          // console.log(oldString)\n          const newString = oldString.replace(\"100x100bb.jpg\", \"500x500bb.jpg\");\n          // console.log(newString)\n          coverArt.artworkUrl100 = newString\n        } )\n\n        // Explicit vs not-explicit returned from API is not formatted in a render-friendly way\n        // Change the value to be \"Explicit\"\n        albumsReturned.map( (coverArt) => {\n          const oldSfwString = coverArt.collectionExplicitness;\n          const newSfwString = oldSfwString.replace(\"notExplicit\", \"not explicit\")\n          coverArt.collectionExplicitness = newSfwString\n        })\n\n        // Error handling if no results are returned\n        albumsReturned.length !== 0 ? this.setState({\n          albums: albumsReturned\n        }) : alert(\"Sorry! We couldn't find an artist with that name. Please try another artist!\");\n\n        console.log(albumsReturned)\n      });\n\n    // reset input field\n    this.setState({\n      userInput: ''\n    })\n  }\n  \n  //Tracks Sort button - Descending\n  handleSortDesc = () => {\n\n    // Creating a copy of state to not mutate it\n    const updatedDescList = [...this.state.albums]\n\n    const sortedDescList = updatedDescList.sort((a, b) => Date.parse(b.releaseDate) - Date.parse(a.releaseDate))\n\n    console.log(sortedDescList)\n\n    this.setState({\n      albums: sortedDescList\n    })\n  };\n\n  //Tracks Sort button - Ascending\n  handleSortAsc = () => {\n\n    // Create a copy of state to not mutate it\n    const updatedAscList = [...this.state.albums]\n\n    const sortedAscList = updatedAscList.sort((a, b) => Date.parse(a.releaseDate) - Date.parse(b.releaseDate))\n\n    this.setState({\n      albums: sortedAscList\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* HEADER */}\n        <Header />\n\n        {/* FORM */}\n        <section>\n          <div className=\"wrapper\">\n            <form action=\"submit\">\n              <label htmlFor=\"search-bar\">Type in an artist to discover their entire discography</label>\n              <input type=\"text\" id=\"newAlbum\" className=\"search-bar\" onChange={this.handleChange} value={this.state.userInput} placeholder=\"search for an artist\"/>\n              <input type=\"submit\" className=\"submit\" value=\"search\" onClick={this.handleClick}/>\n            </form>\n          </div>\n        </section>\n\n        {/* RESULTS/ALBUM SECTION */}\n        {/* Telling render method that once you get info on the albums, map through them and display them in an li*/}\n        <section>\n          <div className=\"wrapper\">\n\n            {/* Sort Descending Button */}\n            <button className=\"sort\" onClick={this.handleSortDesc}>Sort (newest to oldest) <FontAwesomeIcon icon={faSortDown} /></button>\n\n            {/* Sort Ascending Button */}\n            <button className=\"sort\" onClick={this.handleSortAsc}>Sort (oldest to newest) <FontAwesomeIcon icon={faSortUp} /></button>\n\n            <ul>\n            {this.state.albums.map((album) => {\n              // console.log(album)\n              \n              // Variables for specific pieces of info from the API\n              const artistName = album.artistName\n              const albumArt = album.artworkUrl100\n              const albumName = album.collectionName\n              const explicitAlert = album.collectionExplicitness\n              const releaseDate = album.releaseDate\n              const id = album.collectionId\n              const url = album.collectionViewUrl\n\n              return (\n                <li key={id} className=\"albumCard\" onClick={this.handleModal}>\n                  <div className=\"albumContainer\">\n                    \n                    <img src={albumArt} alt=\"Album artwork\"/>\n\n                    <h3>{albumName}</h3>\n\n                    {/* Changing style if SFW vs. NSFW */}\n                    { explicitAlert === 'explicit' ? <p className=\"explicit\">{explicitAlert}</p> : <p className=\"notExplicit\">{explicitAlert}</p>}\n                    <p>Release Date: {releaseDate.slice(0,10)}</p>\n\n                    <a href={url}><FontAwesomeIcon icon={faApple} /> Listen on Apple Music</a>\n\n                  </div>\n                </li>\n              )\n            })}\n            </ul>\n          </div>\n        </section>\n        \n        <Footer />\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}